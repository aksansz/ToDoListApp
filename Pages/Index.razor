@page "/"
@inject TodoListDbContext _context

<div class="d-flex flex-row">
    <input type="text" @bind-value="newTask" placeholder="Add a new task"/>
    <button @onclick="AddNewTodo">Add</button>
</div>

<div>
    <ol>
        <li>
            @foreach(var todo in todos)
            {   
                <div class="d-flex flex-row">
                    <input type="checkbox" @bind-value="todo.IsCompleted"/>
                    <label class="@IsCompleted(todo.IsCompleted)">@todo.Task</label>
                    <button @onclick="(()=> DeleteTodo(todo))">Delete</button>
                </div>
            }
        </li>
    </ol>
</div>



@code{
    private IList<TodoItem> todos { get; set; } = new List<TodoItem>();
    private string newTask = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            todos = await _context.TodoItems.ToListAsync();
            StateHasChanged();
        }
    }

    private string IsCompleted(bool isCompleted)
    {
        return isCompleted ? "item-completed" : "";
    }

    private async Task AddNewTodo()
    {
        if(!string.IsNullOrWhiteSpace(newTask))
        {
            var newTodo = new TodoItem
            {
                Task = newTask,
                IsCompleted = false,
                CreatedDate = DateTime.Now
            };
            todos.Add(newTodo);
            await _context.TodoItems.AddAsync(newTodo);
            await SaveTodosAsync();
            newTask = "";
            StateHasChanged();
        }
        
    }
    
    private async Task DeleteTodo(TodoItem todo)
    {
        todos.Remove(todo);
        _context.TodoItems.Remove(todo);
        await SaveTodosAsync();
        StateHasChanged();
    }

    private async Task SaveTodosAsync()
    {
        await _context.SaveChangesAsync();
    }
}
